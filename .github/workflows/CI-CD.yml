name: Deploy Administrado-Zuma
run-name: ${{ github.actor }} is deploying Administrado-Zuma

on:
  push:
    branches:
      - main

jobs:
  # =============================
  # 1. Crear imagen Docker
  # =============================
  create-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Crear .env temporal para build
      - name: Create .env file
        run: |
          cat <<EOF > .env
          APP_NAME=${{ secrets.APP_NAME }}
          APP_ENV=${{ secrets.APP_ENV }}
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=${{ secrets.APP_DEBUG }}
          APP_TIMEZONE=${{ secrets.APP_TIMEZONE }}
          APP_URL=${{ secrets.APP_URL }}
          APP_LOCALE=${{ secrets.APP_LOCALE }}
          APP_FALLBACK_LOCALE=${{ secrets.APP_FALLBACK_LOCALE }}
          APP_FAKER_LOCALE=${{ secrets.APP_FAKER_LOCALE }}
          APP_MAINTENANCE_DRIVER=${{ secrets.APP_MAINTENANCE_DRIVER }}
          APP_MAINTENANCE_STORE=${{ secrets.APP_MAINTENANCE_STORE }}
          BCRYPT_ROUNDS=${{ secrets.BCRYPT_ROUNDS }}
          CLIENT_APP_URL=${{ secrets.CLIENT_APP_URL }}
          LOG_CHANNEL=${{ secrets.LOG_CHANNEL }}
          LOG_STACK=${{ secrets.LOG_STACK }}
          LOG_DEPRECATIONS_CHANNEL=${{ secrets.LOG_DEPRECATIONS_CHANNEL }}
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}
          DB_CONNECTION=${{ secrets.DB_CONNECTION }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          SESSION_DRIVER=${{ secrets.SESSION_DRIVER }}
          SESSION_LIFETIME=${{ secrets.SESSION_LIFETIME }}
          SESSION_ENCRYPT=${{ secrets.SESSION_ENCRYPT }}
          SESSION_PATH=${{ secrets.SESSION_PATH }}
          SESSION_DOMAIN=${{ secrets.SESSION_DOMAIN }}
          BROADCAST_CONNECTION=${{ secrets.BROADCAST_CONNECTION }}
          FILESYSTEM_DISK=${{ secrets.FILESYSTEM_DISK }}
          QUEUE_CONNECTION=${{ secrets.QUEUE_CONNECTION }}
          CACHE_STORE=${{ secrets.CACHE_STORE }}
          CACHE_PREFIX=${{ secrets.CACHE_PREFIX }}
          MEMCACHED_HOST=${{ secrets.MEMCACHED_HOST }}
          REDIS_CLIENT=${{ secrets.REDIS_CLIENT }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          MAIL_MAILER=${{ secrets.MAIL_MAILER }}
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_ENCRYPTION=${{ secrets.MAIL_ENCRYPTION }}
          MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME="${{ secrets.MAIL_FROM_NAME }}"
          BREVO_KEY=${{ secrets.BREVO_KEY }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
          AWS_BUCKET=${{ secrets.AWS_BUCKET }}
          AWS_USE_PATH_STYLE_ENDPOINT=${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}
          AWS_ENDPOINT=${{ secrets.AWS_ENDPOINT }}
          VITE_APP_NAME="${{ secrets.APP_NAME }}"
          CONSULTA_DNI_API_TOKEN=${{ secrets.CONSULTA_DNI_API_TOKEN }}
          CONSULTA_RUC_API_TOKEN=${{ secrets.CONSULTA_RUC_API_TOKEN }}
          TWILIO_SID=${{ secrets.TWILIO_SID }}
          TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_WHATSAPP_FROM=${{ secrets.TWILIO_WHATSAPP_FROM }}
          EOF

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN_CI }}

      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg APP_NAME=$APP_NAME \
            --build-arg APP_ENV=$APP_ENV \
            --build-arg APP_KEY=$APP_KEY \
            --build-arg APP_DEBUG=$APP_DEBUG \
            --build-arg APP_TIMEZONE=$APP_TIMEZONE \
            --build-arg APP_URL=$APP_URL \
            --build-arg APP_LOCALE=$APP_LOCALE \
            --build-arg APP_FALLBACK_LOCALE=$APP_FALLBACK_LOCALE \
            --build-arg APP_FAKER_LOCALE=$APP_FAKER_LOCALE \
            --build-arg APP_MAINTENANCE_DRIVER=$APP_MAINTENANCE_DRIVER \
            --build-arg APP_MAINTENANCE_STORE=$APP_MAINTENANCE_STORE \
            --build-arg BCRYPT_ROUNDS=$BCRYPT_ROUNDS \
            --build-arg CLIENT_APP_URL=$CLIENT_APP_URL \
            --build-arg LOG_CHANNEL=$LOG_CHANNEL \
            --build-arg LOG_STACK=$LOG_STACK \
            --build-arg LOG_DEPRECATIONS_CHANNEL=$LOG_DEPRECATIONS_CHANNEL \
            --build-arg LOG_LEVEL=$LOG_LEVEL \
            --build-arg DB_CONNECTION=$DB_CONNECTION \
            --build-arg DB_HOST=$DB_HOST \
            --build-arg DB_PORT=$DB_PORT \
            --build-arg DB_DATABASE=$DB_DATABASE \
            --build-arg DB_USERNAME=$DB_USERNAME \
            --build-arg DB_PASSWORD=$DB_PASSWORD \
            --build-arg SESSION_DRIVER=$SESSION_DRIVER \
            --build-arg SESSION_LIFETIME=$SESSION_LIFETIME \
            --build-arg SESSION_ENCRYPT=$SESSION_ENCRYPT \
            --build-arg SESSION_PATH=$SESSION_PATH \
            --build-arg SESSION_DOMAIN=$SESSION_DOMAIN \
            --build-arg BROADCAST_CONNECTION=$BROADCAST_CONNECTION \
            --build-arg FILESYSTEM_DISK=$FILESYSTEM_DISK \
            --build-arg QUEUE_CONNECTION=$QUEUE_CONNECTION \
            --build-arg CACHE_STORE=$CACHE_STORE \
            --build-arg CACHE_PREFIX=$CACHE_PREFIX \
            --build-arg MEMCACHED_HOST=$MEMCACHED_HOST \
            --build-arg REDIS_CLIENT=$REDIS_CLIENT \
            --build-arg REDIS_HOST=$REDIS_HOST \
            --build-arg REDIS_PASSWORD=$REDIS_PASSWORD \
            --build-arg REDIS_PORT=$REDIS_PORT \
            --build-arg RESEND_API_KEY=$RESEND_API_KEY \
            --build-arg MAIL_MAILER=$MAIL_MAILER \
            --build-arg MAIL_HOST=$MAIL_HOST \
            --build-arg MAIL_PORT=$MAIL_PORT \
            --build-arg MAIL_USERNAME=$MAIL_USERNAME \
            --build-arg MAIL_PASSWORD=$MAIL_PASSWORD \
            --build-arg MAIL_ENCRYPTION=$MAIL_ENCRYPTION \
            --build-arg MAIL_FROM_ADDRESS=$MAIL_FROM_ADDRESS \
            --build-arg MAIL_FROM_NAME="$MAIL_FROM_NAME" \
            --build-arg BREVO_KEY=$BREVO_KEY \
            --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            --build-arg AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION \
            --build-arg AWS_BUCKET=$AWS_BUCKET \
            --build-arg AWS_USE_PATH_STYLE_ENDPOINT=$AWS_USE_PATH_STYLE_ENDPOINT \
            --build-arg AWS_ENDPOINT=$AWS_ENDPOINT \
            --build-arg VITE_APP_NAME=$VITE_APP_NAME \
            --build-arg CONSULTA_DNI_API_TOKEN=$CONSULTA_DNI_API_TOKEN \
            --build-arg CONSULTA_RUC_API_TOKEN=$CONSULTA_RUC_API_TOKEN \
            --build-arg TWILIO_SID=$TWILIO_SID \
            --build-arg TWILIO_AUTH_TOKEN=$TWILIO_AUTH_TOKEN \
            --build-arg TWILIO_WHATSAPP_FROM=$TWILIO_WHATSAPP_FROM \
            -t ghcr.io/adm-garantiacapital/administrado-zuma:latest \
            -f docker/Dockerfile .
          docker push ghcr.io/adm-garantiacapital/administrado-zuma:latest

  # =============================
  # 2. Deploy en VPS v√≠a SSH
  # =============================
  deploy-docker-image:
    needs: create-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH client
        run: sudo apt-get install openssh-client -y

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v2
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          envs: "DOCKER_IMAGE_TAG=latest"
          script: |
            cd zuma/services/zuma-admin || exit 1

            # Login al GHCR
            echo "${{ secrets.TOKEN_CI }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull de la imagen
            docker pull ghcr.io/adm-garantiacapital/administrado-zuma:$DOCKER_IMAGE_TAG

            # Detener y eliminar contenedor antiguo
            docker compose stop zuma-adm || true
            docker compose rm -f zuma-adm || true

            # Borrar imagen anterior
            docker image rm ghcr.io/adm-garantiacapital/administrado-zuma:latest || true

            # Levantar contenedor nuevo
            docker compose up -d --force-recreate zuma-adm

            # Ejecutar setup.sh dentro del contenedor
            sh setup.sh

            # Opcional: limpiar cache y optimizar
            docker compose exec zuma-adm php artisan optimize:clear
